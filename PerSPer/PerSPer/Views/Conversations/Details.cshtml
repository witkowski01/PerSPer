@using System.Security.Cryptography.X509Certificates;
@using PerSPer.Models
@using XSockets.Core.Configuration;

@model PerSPer.Models.Conversation

@{
    Layout = null;
}
<head>

    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewBag.Title - PerSPer</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")
    @Scripts.Render("~/bundles/xcockets")
    <style>
        #localVideo {
            position: absolute;
            bottom: 0;
            right: 10px;
        }

        #localVideo video {
            max-width: 120px;
        }

        #remoteVideos video {
            max-width: 320px;
            float: left;
            margin-right: 10px;
        }


    </style>
    <style>
        audio {
            vertical-align: bottom;
            width: 10em;
        }

        video {
            max-width: 100%;
            vertical-align: top;
        }

        input {
            border: 1px solid #d9d9d9;
            border-radius: 1px;
            font-size: 2em;
            margin: .2em;
            width: 30%;
        }


        label {
            display: inline-block;
            width: 8em;
        }
    </style>


</head>
<body>
    <div class="navbar navbar-inverse navbar-fixed-top">
        <div class="container">
            <div class="navbar-header">
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target=".navbar-collapse">
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                @Html.ActionLink("PerSPer", "Index", "Home", new { area = "" }, new { @class = "navbar-brand" })
            </div>
            <div class="navbar-collapse collapse">
                <ul class="nav navbar-nav">
                    <li>@Html.ActionLink("Home", "Index", "Home")</li>
                    <li>@Html.ActionLink("About", "About", "Home")</li>
                    <li>@Html.ActionLink("Contact", "Contact", "Home")</li>
                </ul>
                @Html.Partial("_LoginPartial")
            </div>
        </div>
    </div>
    <div> <img src="/PerSPerLogo.png" class="img-responsive    center-block" alt="PerSPer_logo" title="PerSPer_logo"> </div>
    <div class="container body-content">
    </div>







<!--RemoteVidoCamera section-->
<div class="col-md-12">
    <h3>Remote Videos</h3>
    <div id="remoteVideos">
    </div>
    <div id="localVideo">
        <h3>Me</h3>
        <video autoplay muted></video> <!-- important to start video after user join to conversation -->
    </div>

    <!-- XVA-- WebRTC Basic -->
    <script>
        function $(selector, el) {
            if (!el) {
                el = document;
            }
            return el.querySelector(selector);
        }

        var brokerController, context, wss, webRTC;
        document.addEventListener("DOMContentLoaded", function() {
            // connect to the server using a predefined context (a.k.a room )
            // we pass a 'static' guid as a parameters , see ctx below

            //This is how i get separate room to all conversations 

            var roomID = @Model.Id;
            var roomIDString = roomID.toString();

            if (roomID<10) {
                roomIDString = '0' + roomID.toString();

                context = '1c743b9b-f19f-4b74-a472-4081dbc14f'+roomIDString;
            }
            if (roomID>=100) {
                roomIDString =roomID.toString();
                context = '1c743b9b-f19f-4b74-a472-4081dbc14'+roomIDString;
            }
            if (roomID>=1000) {
                roomIDString =roomID.toString();
                context = '1c743b9b-f19f-4b74-a472-4081dbc1'+roomIDString;
            }
            // If you want more conversations create more if(roomID ...

            wss = new XSockets.WebSocket("wss://" + location.host, ["connectionbroker"], {
                ctx: context
            });
            wss.onconnected = function() {
                console.log("connected to to broker");
                brokerController = wss.controller("connectionbroker"); // get the 'connectionBroker'
                // create an WebRTC instance using the connectionBroker
                webRTC = new XSockets.WebRTC(brokerController);
                // okey, we are connected, prompt and get a mediaSteam (video, qvga )
                var gumConstraints = webRTC.userMediaConstraints.qvga(true); // to get sound, pass true
                webRTC.getUserMedia(gumConstraints, function(peer) {
                    console.log("Got a media stream, onlocalvideo will fire..");
                }, function(ex) {
                    console.error("faild to getUserMedia", ex);
                });
                // localMediaStream
                webRTC.onlocalstream = function(stream) {
                    window.attachMediaStream($("#localVideo video"), stream);
                    // when i got a local mediastream , connect to others.
                    webRTC.connectToContext();
                };
                // remoteMediaStream will fire for each of the remote peerConnections
                webRTC.onremotestream = function(remote) {
                    var removteVideo = document.createElement("video");
                    removteVideo.setAttribute("autoplay", "true");
                    removteVideo.setAttribute("data-streamid", remote.stream.id);
                    $("#remoteVideos").appendChild(removteVideo);
                    window.attachMediaStream(removteVideo, remote.stream);
                };
                // onremovestream will fire when a remote peer is no longer available
                webRTC.onremotestreamlost = function(evt) {
                    $("#remoteVideos").removeChild($("video[data-streamid='" + evt.stream.id + "']"));
                };
                webRTC.oncontextcreated = function(ctx) {
                    console.log("Connected to the broker on the following context", ctx.Context);
                };
            };
        });
    </script>
</div>
<div class="col-md-12">
    
</div>
    <div>
        @Html.ActionLink("Back to conversations list", "Index", "Conversations", null, new { @class = "btn btn-primary" })
    </div>
@Scripts.Render("~/bundles/bootstrap")

</body>